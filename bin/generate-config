#!/usr/bin/env ruby

#
# Author: Patrick Wright <patrick@chef.io>
# Copyright (C) 2015, Chef Software, Inc. <legal@getchef.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'rubygems'
require 'mixlib/cli'
require 'mixlib/shellout'
require 'json'
require 'uri'

class GenerateConfig
  include Mixlib::CLI

  banner """
If you are having to edit the json attributes file then I'm doing it wrong.
Please submit an issue: https://github.com/opscode/qa-chef-server-cluster/issues

  ::Resolving artifacts from Artifactory::

  :Version values:
'latest-stable'
  install lastest version from omnibus-stable-local
'latest-current'
  install lastest version from omnibus-current-local
'12.0.1'
  disable integration builds, and install version from omnibus-stable-local
  To install a non-integration version from omnibus-current-local 
  set `--chef-server-core-install-repo current`
'12.0.1+'
  append '+' to enable integration builds, and install lastest version from omnibus-current-local
'12.0.1+20150123091710.git.58.af97194'
  install specific version from omnibus-current-local
'URL' 
  http/https (jenkins download URLs work great!)

  :Repo values:
'current'
  omnibus-current-local
'stable'
  omnibus-stable-local

Not setting these options will result in using the cookbook's defaults attribute values.
"""

  option :chef_server_core_install_version,
    :long => '--chef-server-core-install-version CHEF SERVER CORE INSTALL VERSION'

  option :chef_server_core_install_repo,
    :long => '--chef-server-core-install-repo CHEF SERVER CORE INSTALL REPO'

  option :chef_server_core_upgrade_version,
    :long => '--chef-server-core-upgrade-version CHEF SERVER CORE UPGRADE VERSION'

  option :chef_server_core_upgrade_repo,
    :long => '--chef-server-core-upgrade-repo CHEF SERVER CORE UPGRADE REPO'

  option :opscode_manage_install_version,
    :long => '--opscode-manage-install-version OPSCODE MANAGE INSTALL VERSION'

  option :opscode_manage_install_repo,
    :long => '--opscode-manage-install-repo OPSCODE MANAGE INSTALL REPO'

  option :opscode_manage_upgrade_version,
    :long => '--opscode-manage-upgrade-version OPSCODE MANAGE INSTALL VERSION'

  option :opscode_manage_upgrade_repo,
    :long => '--opscode-manage-upgrade-repo OPSCODE MANAGE INSTALL REPO'

  option :chef_ha_install_version,
    :long => '--chef-ha-install-version CHEF HA INSTALL VERSION'

  option :chef_ha_install_repo,
    :long => '--chef-ha-install-repo CHEF HA INSTALL REPO'

  option :chef_ha_upgrade_version,
    :long => '--chef-ha-upgrade-version CHEF HA UPGRADE VERSION'

  option :chef_ha_upgrade_repo,
    :long => '--chef-ha-upgrade-repo CHEF HA UPGRADE REPO'

  # TODO what do I really want to do with these end-to-end settings?
  # option :enable_upgrade,
  #   :short => '-u',
  #   :long => '--enable-upgrade',
  #   :description => 'enables the upgrade process',
  #   :boolean => true

  # option :disable_auto_destroy,
  #   :long => '--disable-auto-destroy',
  #   :description => 'disables auto destroy of clusters after tests',
  #   :boolean => true

  # option :skip_pedant,
  #   :long => '--skip-pedant',
  #   :description => "skip 'chef-server-ctl test' execution",
  #   :boolean => true

  # option :topology,
  #   :short => '-t',
  #   :long => '--topology TOPOLOGY',
  #   :description => 'chef server topology'

  option :attributes_file,
    :short => '-j',
    :long => '--json-attributes JSON ATTRIBUTES',
    :description => 'output path for attributes file',
    :default => 'attributes.json'

  option :overwrite_attributes_file,
    :short => '-f',
    :description => 'overwrite existing attributes file',
    :boolean => true

  option :run_recipe,
    :short => '-r',
    :long => '--run-recipe RUN RECIPE',
    :description => 'run chef-client with run recipe'

  option :platform,
    :short => '-p',
    :long => '--platform PLATFORM-VERSION',
    :description => 'Platform and version',
    :default => 'ubuntu-14.04'

  option :help,
    :short => "-h",
    :long => "--help",
    :description => "Show this message",
    :on => :tail,
    :boolean => true,
    :show_options => true,
    :exit => 0

  # Placeholder
  # TODO This will likely be removed once I split the repo and cookbook projects
  # option :chef_repo_path,
  #   :long => '--chef-repo-path',
  #   :description => "set the chef_repo_path. create path if it doesn't exist."

  # TODO add node.default['qa-chef-server-cluster']['chef-provisioner-key-name'] override
  # or perhaps a default insecure key

  # TODO :bootstrap_options => { :key_name override
end


cli = GenerateConfig.new
cli.parse_options

IMAGE_MAP = {
  'ubuntu-10.04' => 'ami-eb5b19db', # ebs-io1; ebs-ssd not mounting the root fs
  'ubuntu-12.04' => 'ami-0f47053f', # ebs-hvm-ssd
  'ubuntu-14.04' => 'ami-3d50120d', # ebs-hvm-ssd

  # RedHat
  'el-5' => 'ami-87d948b7', # ebs-magnetic
  'el-6' => 'ami-aa8bfe9a', # ebs-magnetic
  'el-7' => 'ami-77d7a747', # ebs-hvm-magnetic
}

def ssh_user_for(image)
  case image
  when /^ubuntu/
    'ubuntu'

  when /^el/
    version = image.match(/el-(?<version>.+)/)[:version]
    raise "Unknown image #{image}!" if version.nil?

    version.to_i == 5 ? 'root' : 'ec2-user'

  else
    'ec2-user'
  end
end

#
# simplify setting repos via the cli
#
def repo_name(repo)
  name = nil
  case repo
  when 'stable'
    name = 'omnibus-stable-local'
  when 'current'
    name = 'omnibus-current-local'
  when nil # pass through
  else
    raise "#{repo} not supported. must be current or stable"
  end
  name
end

#
# Create the appropriate config options that will be 
#   passed to omnibus_artifactory_artifact to download
#   the expected packages.
#
def version_for(version, repo)
  config = {}
  case
  when version == 'latest-stable'
    config[:version] = :latest_stable
  when version == 'latest-current'
    config[:version] = :latest_current
  when is_url?(version)
    config[:version] = version
  else
    # '+' means that we want to search for integration builds, 
    #   which is the default behavior. Still need to strip the '+'
    if version.include?('+')
      version.delete('+') if version.end_with?('+')
    # otherwise instruct omnibus_artifactory_artifact we don't
    # want integration builds
    else
      config[:integration_builds] = false
    end
    config[:version] = version if version
    config[:repo] = repo_name(repo) if repo
  end
  config
end

def is_url?(string)
  (string =~ /\A#{URI::regexp(['http', 'https'])}\z/) == 0
end

attrs = {
  '_comment' => "If you are having to edit the json attributes file then I'm doing it wrong. Please submit an issue: https://github.com/opscode/qa-chef-server-cluster/issues",
  'qa-chef-server-cluster' => {
    # TODO what do I really want to do with these end-to-end settings?
    # 'enable-upgrade' => cli.config[:enable_upgrade] ? true : false
    # 'auto-destroy' => cli.config[:disable_auto_destroy] ? false : true,
    # 'run-pedant' => cli.config[:skip_pedant] ? false : true,

    'chef-server-core' => {},
    'opscode-manage' => {},
    'chef-ha' => {},

    'aws' => {
      'machine_options' => {
        'ssh_username' => ssh_user_for(cli.config[:platform]),
        'bootstrap_options' => {
          'image_id' => IMAGE_MAP[cli.config[:platform]]
        }
      }
    }
  }
}

if cli.config[:chef_server_core_install_version]
  attrs['qa-chef-server-cluster']['chef-server-core']['install'] = version_for(cli.config[:chef_server_core_install_version], 
    cli.config[:chef_server_core_install_repo])
end

if cli.config[:chef_server_core_upgrade_version]
  attrs['qa-chef-server-cluster']['chef-server-core']['upgrade'] = version_for(cli.config[:chef_server_core_upgrade_version], 
    cli.config[:chef_server_core_upgrade_repo])
end

if cli.config[:opscode_manage_install_version]
  attrs['qa-chef-server-cluster']['opscode-manage']['install'] = version_for(cli.config[:opscode_manage_install_version], 
    cli.config[:opscode_manage_install_repo])
end

if cli.config[:opscode_manage_upgrade_version]
  attrs['qa-chef-server-cluster']['opscode-manage']['upgrade'] = version_for(cli.config[:opscode_manage_upgrade_version],
    cli.config[:opscode_manage_upgrade_repo])
end

if cli.config[:chef_ha_install_version]
  attrs['qa-chef-server-cluster']['chef-ha']['install'] = version_for(cli.config[:chef_ha_install_version],
    cli.config[:chef_ha_install_repo])
end

if cli.config[:chef_ha_upgrade_version]
  attrs['qa-chef-server-cluster']['chef-ha']['upgrade'] = version_for(cli.config[:chef_ha_upgrade_version],
    repo_name(cli.config[:chef_ha_upgrade_repo]))
end

# TODO what do I really want to do with these end-to-end settings?
# if cli.config[:topology]
#   attrs['qa-chef-server-cluster']['topology'] = cli.config[:topology]
# end

raise "#{cli.config[:attributes_file]} exists. Change file path or use -f option" if File.exist?(cli.config[:attributes_file]) and not cli.config[:overwrite_attributes_file]

open(cli.config[:attributes_file], 'w') do |f|
  f.puts JSON.pretty_generate(attrs)
end

puts "Attributes written to file #{cli.config[:attributes_file]}."

if cli.config[:run_recipe]
  system("bundle exec chef-client -z -j #{cli.config[:attributes_file]} -o qa-chef-server-cluster::#{cli.config[:run_recipe]}")
end
