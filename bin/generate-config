#!/usr/bin/env ruby

require 'rubygems'
require 'mixlib/cli'
require 'mixlib/shellout'
require 'json'
require 'artifactory'

# TODO: THERE BE DRAGONS BELOW!  I SHALL SLAY THEM ALL! (pwright)
class GenerateConfig
  include Mixlib::CLI

  option :server_install_source,
    :long => '--server-install-source CHEF SERVER CORE SOURCE',
    :description => 'specify chef-server-core url location'

  option :manage_install_source,
    :long => '--manage-install-source OPSCODE MANAGE SOURCE',
    :description => 'specify opscode-manage url location'

  option :server_upgrade_source,
    :long => '--server-upgrade-source CHEF SERVER CORE UPGRADE SOURCE',
    :description => 'specify chef-server-core upgrade url location'

  option :manage_upgrade_source,
    :long => '--manage-upgrade-source OPSCODE MANAGE UPGRADE SOURCE',
    :description => 'specify opscode-manage upgrade url location'

  option :enable_upgrade,
    :long => '--enable-upgrade',
    :description => 'enables the upgrade process',
    :boolean => true

  option :disable_auto_destroy,
    :long => '--disable-auto-destroy',
    :description => 'disables auto destroy of clusters after tests',
    :boolean => true

  option :attributes_file,
    :short => '-j',
    :long => '--json-attributes JSON ATTRIBUTES',
    :description => 'output path for attributes file',
    :default => 'attributes.json'

  option :overwrite_attributes_file,
    :short => '-f',
    :description => 'overwrite existing attributes file',
    :boolean => true

  option :run_recipe,
    :short => '-r',
    :long => '--run-recipe RUN RECIPE',
    :description => 'run chef-client with run recipe'

  # Placeholder
  # option :chef_repo_path,
  #   :long => '--chef-repo-path',
  #   :description => "set the chef_repo_path. create path if it doesn't exist."

  option :platform,
    :short => '-p',
    :long => '--platform PLATFORM-VERSION',
    :description => 'Platform and version',
    :default => 'ubuntu-12.04'

  option :help,
    :short => "-h",
    :long => "--help",
    :description => "Show this message",
    :on => :tail,
    :boolean => true,
    :show_options => true,
    :exit => 0

    # TODO add node.default['qa-chef-server-cluster']['chef-provisioner-key-name'] override
    # or perhaps a default insecure key

    # TODO :bootstrap_options => { :key_name override
end


 ##################################
 # Yes, this needs some love.  
 # Hacked together to figure this thing out.
 ###################################

class ArtifactoryResolver
  # https://gist.github.com/schisamo/179233af7a7c6eac0923

  # These items should be configurable
  ARTIFACTORY_ENDPOINT     = 'http://artifactory.opscode.us'
  ARTIFACTORY_OMNIBUS_REPO = 'omnibus-current-local'

  def initialize(config)
    @client = Artifactory::Client.new(endpoint: ARTIFACTORY_ENDPOINT)
    @config = config
  end

  def search_uri(name)
    # Fetch latest stable (release or pre-release) version 
    latest_version = @client.artifact_latest_version(
      repos: ARTIFACTORY_OMNIBUS_REPO,
      group: 'com.getchef',
      name:  name
    )

    # Fetch latest build/integration version in the series
    build_version = @client.artifact_latest_version(
      repos: ARTIFACTORY_OMNIBUS_REPO,
      group:   'com.getchef',
      name:    name,
      version: latest_version
    )

    # locate a specific package
    artifact = @client.artifact_property_search(
      'repos' => ARTIFACTORY_OMNIBUS_REPO,
      'omnibus.project' => name,
      'omnibus.platform' => @config[:platform].split('-').first,
      'omnibus.platform_version' => @config[:platform].split('-').last,
      'omnibus.version' => build_version.gsub(/_/,'-')
    )

    return artifact[0].uri
  end

end

cli = GenerateConfig.new
cli.parse_options

attrs = { 'qa-chef-server-cluster' => {'chef-server-core' => {}, 'opscode-manage' => {}, 'aws' => {} } }

@resolver = ArtifactoryResolver.new(cli.config)

def get_uri(source, artifact_id)
  uri = source
  uri = @resolver.search_uri(artifact_id) if source.match(/^artifactory/)
  return uri
end

IMAGE_MAP = {
  'ubuntu-12.04' => 'ami-ad42009d',
  'ubuntu-10.04' => 'ami-05a3ff35'
}

def ssh_user_for(image)
  case image
  when /^ubuntu/
    'ubuntu'

  when /rhel/
    version = image.match(/rhel-(?<version>.+)/)[:version]
    raise "Unknown image #{image}!" if version.nil?

    version.to_i == 5 ? 'root' : 'ec2-user'

  else
    'ec2-user'
  end
end

aws_hash = { 
  'aws' => {
    'machine_options' => {
      'ssh_username' => ssh_user_for(cli.config[:platform]),
      'bootstrap_options' => {
        'image_id' => IMAGE_MAP[cli.config[:platform]]
       }
    } 
  }
}

attrs['qa-chef-server-cluster']['chef-server-core']['source'] = get_uri(cli.config[:server_install_source], 'chef-server') if cli.config[:server_install_source]
attrs['qa-chef-server-cluster']['opscode-manage']['source'] = get_uri(cli.config[:manage_install_source], 'opscode-manage') if cli.config[:manage_install_source]

attrs['qa-chef-server-cluster']['chef-server-core']['upgrade-source'] =  get_uri(cli.config[:server_upgrade_source], 'chef-server') if cli.config[:server_upgrade_source]
attrs['qa-chef-server-cluster']['opscode-manage']['upgrade-source'] = get_uri(cli.config[:manage_upgrade_source], 'opscode-manage') if cli.config[:manage_upgrade_source]

attrs['qa-chef-server-cluster']['enable-upgrade'] = true if cli.config[:enable_upgrade]
attrs['qa-chef-server-cluster']['auto-destroy'] = false if cli.config[:disable_auto_destroy]


attrs['qa-chef-server-cluster'].merge!(aws_hash)

raise "#{cli.config[:attributes_file]} exists. Change file path or use -f option" if File.exist?(cli.config[:attributes_file]) and not cli.config[:overwrite_attributes_file]

open(cli.config[:attributes_file], 'w') do |f|
  f.puts JSON.pretty_generate(attrs)
end

puts "Attributes written to file #{cli.config[:attributes_file]}."

if cli.config[:run_recipe]
  system("chef-client -z -j #{cli.config[:attributes_file]} -o qa-chef-server-cluster::#{cli.config[:run_recipe]}")
end
